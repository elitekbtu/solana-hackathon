    
### Aegis Engine: Backend Rules (@backend)

Этот документ определяет правила и соглашения для бэкенд-сервиса. Все генерируемые и написанные вручную фрагменты кода ДОЛЖНЫ соответствовать этим правилам.

---

### 1. Guiding Principles (KISS, DRY, SOLID)

-   **KISS (Keep It Simple, Stupid):** Избегай преждевременной оптимизации и излишней сложности. Одна функция — одна задача. Один эндпоинт — одно действие.
-   **DRY (Don't Repeat Yourself):** Выноси повторяющуюся логику (например, подключение к Solana, валидация) в переиспользуемые функции/сервисы в директорию `src/utils` или `src/services`.
-   **SOLID:**
    -   **S (Single Responsibility):**
        -   **Routes (`src/routes`):** Отвечают ТОЛЬКО за определение эндпоинтов и вызов соответствующего контроллера. Никакой бизнес-логики.
        -   **Controllers (`src/controllers`):** Отвечают за парсинг `req`, `res`, вызов сервисов и отправку ответа.
        -   **Services (`src/services`):** Здесь живёт ВСЯ бизнес-логика. Взаимодействие с блокчейном, базами данных, внешними API.
    -   **D (Dependency Inversion):** Контроллеры должны зависеть от абстракций (сервисов), а не от конкретных реализаций.

---

### 2. MUST HAVE: Core Rules & Conventions

#### **a. Структура Проекта (Project Structure)**

Всегда придерживайся этой структуры. Если директории нет, создай её.

  

/src
├── routes/ # Файлы с роутами Express
├── controllers/ # Логика обработки запросов
├── services/ # Бизнес-логика, взаимодействие с Solana
├── middlewares/ # Middleware (например, для обработки ошибок)
├── utils/ # Вспомогательные функции (форматтеры, валидаторы)
└── app.ts # Главный файл приложения
code Code
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END

    
#### **b. API Design**

-   **Версионирование:** Все роуты должны начинаться с `/api/v1/`.
-   **Нейминг:** Используй RESTful конвенции. Ресурсы во множественном числе (`/items`, `/players`).
-   **Ответы:**
    -   Успех (2xx): `res.status(200).json({ success: true, data: {...} });`
    -   Ошибка (4xx, 5xx): `res.status(400).json({ success: false, error: { message: "...", code: "..." } });`
    -   Используй глобальный middleware для обработки ошибок.

#### **c. Взаимодействие с Solana**

-   **НИКОГДА** не пиши логику взаимодействия с Solana (`@solana/web3.js`, `Anchor`) внутри контроллеров.
-   **ВСЕГДА** создавай отдельный `solana.service.ts`. Он должен инкапсулировать `Connection`, загрузку IDL контракта и методы для вызова (`mintNFT`, `checkBalance` и т.д.).
-   Приватные ключи и мнемоники **НИКОГДА** не должны быть в коде. Используй переменные окружения (`.env`).

#### **d. Валидация и Безопасность**

-   **ВСЕГДА** валидируй входящие данные (body, params, query). Используй библиотеку `zod` или `joi`.
-   **ВСЕГДА** оборачивай асинхронные операции в `try...catch` блоки.

#### **e. Код и Стилистика* * 

-   **Язык:** TypeScript. Используй строгие типы.
-   **Стиль:** `camelCase` для переменных и функций. `PascalCase` для классов и типов.
-   **Модули:** Используй ES Modules (`import`/`export`).

---

### 3. Example Prompts for AI

-   **Плохо:** "сделай эндпоинт для минта"
-   **Хорошо:** "Создай эндпоинт `POST /api/v1/items/mint`. В `items.routes.ts` добавь роут. В `items.controller.ts` создай контроллер `mintItem`, который валидирует `walletAddress` и `metadataUri` из `req.body`. Контроллер должен вызывать метод `mintNFT` из `solana.service.ts` и возвращать `transactionSignature`."
-   **Хорошо:** "Создай сервис `solana.service.ts`. Он должен инициализировать `Connection` к Solana devnet из переменной окружения `SOLANA_RPC_URL`. Добавь метод `mintNFT(playerWallet: string, metadataUri: string): Promise<string>`, который будет вызывать наш смарт-контракт Aegis Engine."

  